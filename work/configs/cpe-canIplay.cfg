linkerdIp = "127.0.0.1"
linkerdPort = 4140
externalLinkerdPort = 4141
loglevel = "debug"
servicePort = 8080
allowNilSku = false
entitleAllMvpd = false

# This is how long caniplay will wait for all the checkers to return
waitGroupTimeOut = 5000

#Â In-home only MVPDs. These MVPDs should not be authorized to view Fox content when not at home on a CTV device
inHomeOnlyMVPDs = ["Spectrum"]

# default values for checkers in case of failure
adFreeDefault = false
entitlementDefault = false
pcsDefault = true
freemiumDefault = false
foxIntDefault = false

# countries in this list will be blocked from streaming on Fox News International apps
foxIntRestrictedCountries = []

CancelEntitlers = true

[mvpdBlackout.ATT]
DMA=["123"]
Sku=["fbc-fox", "fs1", "fs2"]

[mvpdBlackout.Dish]
DMA=["999","501","803","602","504","623","549","618","855","506","524","581","753","657","505","613","528","751","534","510","862","555","500","517","508","560","512","659","527","807","661","825","616","533","522","515","617","554","567","839","635","566","561","630","544","650","518","790","529","563","622","640","514","521","866","571","556","693","686","525","557","760","550","541","542","513","744","658","573","652","519","605","619","671","604","679","577","543","636","691","538","530","648","575","820","765","669","637","632","511","624","752","718","819","564","570","523","716","682","881","757","670","789","649","509","520","574","545","638","811","551","722","539","675","526","588","698","724","503","536","531","642","800","801","507","771","828","673","600","810","702","634","868","535","548","813","546","628","576","770","610","692","540","633","651","676","804","687","743","678","725","656","516","532","603","611","537","746","592","547","612","502","758","627","559","762","662","756","710","626","598","764","643","606","717","569","565","639","705","644","734","736","553","584","749","754","821","773","582","709","558","711","755","647","597","802","641","759","767","737","631","609","745","625","596","766","552","747","583","740","798","PR","VI","AS","GU","reserved"]
Sku=["fbc-fox","fs1","fs2","btn-btn2go","fspl", "foxnation","FoxNews"]

[mvpdBlackout.DISH]
DMA=["999","501","803","602","504","623","549","618","855","506","524","581","753","657","505","613","528","751","534","510","862","555","500","517","508","560","512","659","527","807","661","825","616","533","522","515","617","554","567","839","635","566","561","630","544","650","518","790","529","563","622","640","514","521","866","571","556","693","686","525","557","760","550","541","542","513","744","658","573","652","519","605","619","671","604","679","577","543","636","691","538","530","648","575","820","765","669","637","632","511","624","752","718","819","564","570","523","716","682","881","757","670","789","649","509","520","574","545","638","811","551","722","539","675","526","588","698","724","503","536","531","642","800","801","507","771","828","673","600","810","702","634","868","535","548","813","546","628","576","770","610","692","540","633","651","676","804","687","743","678","725","656","516","532","603","611","537","746","592","547","612","502","758","627","559","762","662","756","710","626","598","764","643","606","717","569","565","639","705","644","734","736","553","584","749","754","821","773","582","709","558","711","755","647","597","802","641","759","767","737","631","609","745","625","596","766","552","747","583","740","798","PR","VI","AS","GU","reserved"]
Sku=["fbc-fox","fs1","fs2","btn-btn2go","fspl", "foxnation","FoxNews"]

[mvpdBlackout.YONDOO]
DMA=["999", "501", "803", "602", "504", "623", "549", "618", "855", "506", "524", "581", "753", "657", "505", "613", "528", "751", "534", "510", "862", "555", "500", "517", "508", "560", "512", "659", "527", "807", "661", "825", "616", "533", "522", "515", "617", "554", "567", "839", "635", "566", "561", "630", "544", "650","518", "790", "529", "563", "622", "640", "514", "521", "866", "571", "556", "693", "686", "525", "557", "760", "550", "541", "542", "513", "744", "658", "573", "652", "519", "605", "619", "671", "604", "679", "577", "543", "636", "691", "538", "530", "648", "575", "820", "765", "669", "637", "632", "511","624", "752", "718", "819", "564", "570", "523", "716", "682", "881", "757", "670", "789", "649", "509", "520", "574", "545", "638", "811", "551", "722", "539", "675", "526", "588", "698", "724", "503", "536", "531", "642", "800", "801", "507", "771", "828", "673", "600", "810", "702", "634", "868", "535", "548", "813", "546", "628", "576", "770", "610", "692", "540", "633", "651", "676", "804","687", "743", "678", "725", "656", "516", "532", "603", "611", "537", "746", "592", "547", "612", "502", "758", "627", "559", "762", "662", "756", "710", "626", "598", "764", "643", "606", "717", "569", "565", "639", "705", "644", "734", "736", "553", "584", "749", "754", "821", "773", "582", "709", "558", "711", "755", "647", "597", "802", "641", "759", "767", "737", "631", "609", "745", "625", "596", "766", "552", "747", "583", "740", "798", "PR", "VI", "AS", "GU", "reserved"]
Sku=["fbc-fox","fs1","fs2","btn-btn2go","fspl","FoxNews","foxnation"]

[disabledCheckers]
accountblacklist=true
freemium=false
mvpdblackouts_service=false

# `foxentitlement_getEntitlements` goes to foxentitlement service to retrieve merged mvpd/evergent entitlements
[services.foxentitlement_getEntitlements]
   dontUseLinkerd         = false
   linkerdServiceName     = "foxentitlement_v1"
   timeout                = 7000
   maxConcurrentRequests  = 50
   sleepWindow            = 1500
   requestVolumeThreshold = 20
   errorPercentThreshold  = 20
   isExternal             = false
   # enableTracing = true

# The `jwt_GetPublickKey` endpoint can be leveraged to validate the JWT provided in the request.
[services.jwt_GetPublicKey]
   dontUseLinkerd         = false
   linkerdServiceName     = "jwt_v1"
   timeout                = 5000
   maxConcurrentRequests  = 10
   sleepWindow            = 1500
   requestVolumeThreshold = 20
   errorPercentThreshold  = 20
   isExternal             = false
   # enableTracing = true

# `evergent_checkentitlement` call retrieves entitlement from Evergent
[services.evergent_checkentitlement]
   dontUseLinkerd         = false
   linkerdServiceName     = "evergententitlements_v1"
   timeout                = 5000
   maxConcurrentRequests  = 50
   sleepWindow            = 1500
   requestVolumeThreshold = 20
   errorPercentThreshold  = 20
   isExternal             = false
   # enableTracing = true

[services.pcs_checkpcs]
   dontUseLinkerd         = false
   linkerdServiceName     = "pcs_v1"
   timeout                = 5000
   maxConcurrentRequests  = 50
   sleepWindow            = 1500
   requestVolumeThreshold = 20
   errorPercentThreshold  = 20
   isExternal             = false
   # enableTracing = true

# `adobe_authz` service retrieves mvpd entitlements from Adobe Primetime Authentication
[services.adobe_authz]
   dontUseLinkerd         = false
   linkerdServiceName     = "adobeentitlements_v1"
   timeout                = 6000
   maxConcurrentRequests  = 50
   sleepWindow            = 1500
   requestVolumeThreshold = 20
   errorPercentThreshold  = 20
   isExternal             = false
   # enableTracing = true

# `adobe_mediatoken` call retrieves media token from Adobe is user is entitled by Adobe
[services.adobe_mediatoken]
   dontUseLinkerd         = false
   linkerdServiceName     = "adobeentitlements_v1"
   timeout                = 5000
   maxConcurrentRequests  = 50
   sleepWindow            = 1500
   requestVolumeThreshold = 20
   errorPercentThreshold  = 20
   isExternal             = false
   # enableTracing = true

# `playbackToken_token` retrieves playback token from mpx
[services.playbackToken_token]
   dontUseLinkerd         = false
   linkerdServiceName     = "playback-token_v1"
   timeout                = 5000
   maxConcurrentRequests  = 50
   sleepWindow            = 1500
   requestVolumeThreshold = 20
   errorPercentThreshold  = 20
   isExternal             = false
   # enableTracing = true

# `accountblacklist_check` call retrieves the account blacklist for the user
[services.accountblacklist_check]
   dontUseLinkerd         = false
   linkerdServiceName     = "accountblacklist_v1"
   timeout                = 5000
   maxConcurrentRequests  = 50
   sleepWindow            = 1500
   requestVolumeThreshold = 20
   errorPercentThreshold  = 20
   isExternal             = false
   # enableTracing = true

# `mvpdBlackouts_getBlackout` call checks whether and mpvd is blacked out for a given dma
[services.mvpdBlackouts_getBlackout]
   dontUseLinkerd         = false
   linkerdServiceName     = "mvpdblackouts_v1"
   timeout                = 5000
   maxConcurrentRequests  = 50
   sleepWindow            = 1500
   requestVolumeThreshold = 20
   errorPercentThreshold  = 20
   isExternal             = false
   # enableTracing = true

[services.freemium_checkvideocount]
   dontUseLinkerd         = false
   linkerdServiceName     = "freemium_v1"
   timeout                = 5000
   maxConcurrentRequests  = 50
   sleepWindow            = 1500
   requestVolumeThreshold = 20
   errorPercentThreshold  = 20
   isExternal             = false
   enableTracing = true

[services.foxinternational_verifyiap]
   dontUseLinkerd         = false
   linkerdServiceName     = "iapverify_v1"
   timeout                = 5000
   maxConcurrentRequests  = 50
   sleepWindow            = 1500
   requestVolumeThreshold = 20
   errorPercentThreshold  = 20
   isExternal             = false
   # enableTracing = true
